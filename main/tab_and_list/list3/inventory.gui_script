local data = require("main.data")

local page_list = require "tool.page_list"
local params = require "res.param.inventory"
-- --------------------------------------------------
-- list setup
-- PITCH: template pitch
-- PARENT: parent node name
-- HEAD: template head node name
-- BACK: template background node name
-- --------------------------------------------------
local LIMIT = 3
local PITCH = -100
local PARENT = "t/"
local HEAD = "box"
local BACK = "back"

local list = nil
-- --------------------------------------------------
-- button setup
-- --------------------------------------------------
local s_button = require "tool.button"
local list_button = nil
local page_next_button = nil
local page_pre_button = nil

local function create_button(node, callback)
	return s_button.create(node, callback)
end
local function create_list(node_id, node_num, callback)
	return s_button.create_list(node_id, node_num, callback)
end
-- init
local function setup_button(self)
	local template_back = PARENT .. BACK
	list_button =
		create_list(
		list.boxs,
		template_back,
		function(button, num)
			data.selected_inv = list.begin_num + num
			print("I ate .. " .. params[data.selected_inv]["name"])
		end
	)
	page_next_button =
		create_button(
		gui.get_node("next_button"),
		function()
			self.page_num = self.page_num + 1
			list.update_list(self.page_num, params)
			list_button.select_check(list.check(data.selected_inv))
		end
	)
	page_pre_button =
		create_button(
		gui.get_node("pre_button"),
		function()
			self.page_num = self.page_num - 1
			list.update_list(self.page_num, params)
			list_button.select_check(list.check(data.selected_inv))
		end
	)
	-- selected back color set
	list_button.select_check(list.check(data.selected_inv))
end
-- --------------------------------------------------
-- init node clone and set position
-- --------------------------------------------------
local function setup_list(self)
	self.mask = gui.get_node("mask")
	gui.set_position(self.mask, data.mask_pos)
	self.page_num = math.ceil(data.selected_inv / LIMIT)
	local ori_node = gui.get_node("ori_node")
	list = page_list.new(ori_node, PARENT, HEAD, LIMIT, PITCH, params)
	list.update_list(self.page_num, params)
end
-- --------------------------------------------------
-- update list
-- parent posotion set
-- parameter text update
-- selected back color update
-- --------------------------------------------------
local function update_list(self)
	gui.set_screen_position(self.mask, data.mask_pos)
	list.update_list(self.page_num, params)
end
-- --------------------------------------------------
-- common
-- --------------------------------------------------
function init(self)
	setup_list(self)
	setup_button(self)
	gui.set_render_order(10)
	msg.post("#", "acquire_input_focus")
end
function update(self, dt)
	update_list(self)
end
function on_message(self, message_id, message, sender)
end
function on_input(self, action_id, action)
	list_button.on_input(action_id, action)
	page_next_button.on_input(action_id, action)
	page_pre_button.on_input(action_id, action)
end
